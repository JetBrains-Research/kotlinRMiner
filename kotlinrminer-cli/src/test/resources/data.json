[
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "38448785791cffce8c453b04bcc3e217bb41f1e8",
        "refactorings": [
            {
                "description": "Rename Class shapes.BaseShape renamed to shapes.Shape"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "e839b0b7df4c4069515e695b9ab088c675522aac",
        "refactorings": [
            {
                "description": "Move Class shapes.Point moved to Point"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "b7fec8bacc7e10044ca8fbc85dc13264d1d894f9",
        "refactorings": [
            {
                "description": "Rename Method public getCoordinate() : String renamed to public getCoordinates() : String in class Point"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "0b6035254b55d010f22ef0bfde894cded906178e",
        "refactorings": [
            {
                "description": "Rename Class org.jetbrains.research.ml.codetracker.ui.panes.TaskController renamed to org.jetbrains.research.ml.codetracker.ui.panes.TaskSolvingController"
            },
            {
                "description": "Rename Class org.jetbrains.research.ml.codetracker.ui.panes.TaskControllerManager renamed to org.jetbrains.research.ml.codetracker.ui.panes.TaskSolvingControllerManager"
            },
            {
                "description": "Change Attribute Type paneControllerClass : KClass<TaskController> to paneControllerClass : KClass<TaskSolvingController> in class org.jetbrains.research.ml.codetracker.ui.panes.TaskSolvingControllerManager"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "e818280cae22dcee954baad9980b35c0b61776c3",
        "refactorings": [
            {
                "description": "Rename Class org.jetbrains.research.ml.codetracker.ui.panes.CountryListNotifier renamed to org.jetbrains.research.ml.codetracker.ui.panes.CountryComparatorNotifier"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "3fb9d8b408ac0d7e931333f25cdadc10bc1926b7",
        "refactorings": [
            {
                "description": "Add Parameter deleteAfter : Boolean in method public sendTrackingData(file File, deleteAfter Boolean) from class Server"
            },
            {
                "description": "Add Parameter deleteAfter : Boolean in method public sendTrackingData(file File, deleteAfter Boolean) from class PluginServer"
            },
            {
                "description": "Remove Parameter project : Project in method public startTracking(project Project) from class Plugin"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "e818280cae22dcee954baad9980b35c0b61776c3",
        "refactorings": [
            {
                "description": "Rename Class org.jetbrains.research.ml.codetracker.ui.panes.CountryListNotifier renamed to org.jetbrains.research.ml.codetracker.ui.panes.CountryComparatorNotifier"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "0d8728b310668daf7af510e74315556b4eb23a60",
        "refactorings": [
            {
                "description": "Rename Method private createFile(project Project, task Task, language Language) : VirtualFile? renamed to private getOrCreateFile(project Project, task Task, language Language) : VirtualFile? in class org.jetbrains.research.ml.codetracker.tracking.TaskFileHandler"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "49ad7099a7715347f4636a868ecd5c70c74df85f",
        "refactorings": [
            {
                "description": "Rename Method public getAvailableLanguages() : List<PaneLanguage> renamed to private findAvailableLanguages() : List<PaneLanguage> in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            },
            {
                "description": "Rename Method public getPaneText() : PaneText? renamed to private findPaneText() : PaneText in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            },
            {
                "description": "Rename Method public getCountries() : List<Country> renamed to private findCountries() : List<Country> in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            },
            {
                "description": "Rename Method public getGenders() : List<Gender> renamed to private findGenders() : List<Gender> in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            },
            {
                "description": "Rename Method public getTasks() : List<Task> renamed to private findTasks() : List<Task> in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/lets-plot.git",
        "sha1": "11d3dcecf923a41c716fb100b5f283bf8d96a3ee",
        "refactorings": [
            {
                "description": "Move Method public defaultOutlierTooltips() from class jetbrains.datalore.plot.builder.tooltip.TooltipContentGeneratorTest to public defaultOutlierTooltips() from class jetbrains.datalore.plot.config.TooltipConfigTest"
            },
            {
                "description": "Move And Rename Method public userOutlierTooltips() from class jetbrains.datalore.plot.builder.tooltip.TooltipContentGeneratorTest to public configOutlierTooltips() from class jetbrains.datalore.plot.config.TooltipConfigTest"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/lets-plot.git",
        "sha1": "71222b81fc9401f18d1002677060851e74a75a49",
        "refactorings": [
            {
                "description": "Move Method private createHiddenAesList(geomKind GeomKind) : List<Aes<*>> from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private createHiddenAesList(geomKind GeomKind) : List<Aes<*>> from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            },
            {
                "description": "Add Parameter geomInteraction : GeomInteraction in method private createLayerBuilder(layerConfig LayerConfig, scaleProvidersMap TypedScaleProviderMap, geomInteraction GeomInteraction) : GeomLayerBuilder from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil"
            },
            {
                "description": "Move Method private createTooltipValueSourceList(tooltipLineSpecifications List<TooltipLineSpecification>) : List<ValueSource> from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private createTooltipValueSourceList(tooltipLineSpecifications List<TooltipLineSpecification>) : List<ValueSource> from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            },
            {
                "description": "Move Method private initGeomInteractionBuilder(renders List<Aes<*>>, geomKind GeomKind, statKind StatKind) : GeomInteractionBuilder from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private initGeomInteractionBuilder(renders List<Aes<*>>, geomKind GeomKind, statKind StatKind) : GeomInteractionBuilder from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            },
            {
                "description": "Move Method private createTooltipAesList(layerConfig LayerConfig, axisAes List<Aes<*>>) : List<Aes<*>> from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private createTooltipAesList(layerConfig LayerConfig, axisAes List<Aes<*>>) : List<Aes<*>> from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            },
            {
                "description": "Move Method internal createGeomInteractionBuilder(renders List<Aes<*>>, geomKind GeomKind, statKind StatKind, multilayer Boolean) : GeomInteractionBuilder from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private createGeomInteractionBuilder(renders List<Aes<*>>, geomKind GeomKind, statKind StatKind, multilayer Boolean) : GeomInteractionBuilder from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/lets-plot.git",
        "sha1": "ce848440fa62a7730d1e9e779eed0f10b7adf633",
        "refactorings": [
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.CountStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.SmoothStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.Density2dStat"
            },
            {
                "description": "Move Method public sampleWithoutReplacement(popSize Int, sampleSize Int, rand Random, onPick (Set<Int>) -> T, onDrop (Set<Int>) -> T) : T from class jetbrains.datalore.plot.builder.sampling.method.SamplingUtil to public sampleWithoutReplacement(popSize Int, sampleSize Int, rand Random, onPick (Set<Int>) -> T, onDrop (Set<Int>) -> T) : T from class jetbrains.datalore.plot.base.util.SamplingUtil"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.ContourfStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.AbstractDensity2dStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.Density2dfStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.BoxplotStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.ContourStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.Stat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.DensityStat"
            },
            {
                "description": "Add Parameter messageConsumer : Consumer<String> in method public buildStatData(data DataFrame, stat Stat, bindings List<VarBinding>, groupingContext GroupingContext, facetXVar String?, facetYVar String?, statCtx StatContext, messageConsumer Consumer<String>) : DataAndGroupingContext from class jetbrains.datalore.plot.builder.data.DataProcessing"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.BinStat"
            },
            {
                "description": "Add Parameter compMessageConsumer : Consumer<String> in method private applyStat(data DataFrame, stat Stat, bindings List<VarBinding>, facetXVarName String?, facetYVarName String?, statCtx StatContext, compMessageConsumer Consumer<String>) : DataFrame from class jetbrains.datalore.plot.builder.data.DataProcessing"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.Bin2dStat"
            },
            {
                "description": "Extract Method private getStatName(layerConfig LayerConfig) : String extracted from private createSamplingMessage(samplingExpression String, layerConfig LayerConfig) : String in class jetbrains.datalore.plot.server.config.PlotConfigServerSide"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "67c0bfffc84088dcdbb88a2b7bcc90aec3e764a9",
        "refactorings": [
            {
                "description": "Pull Up Method public getDescription() : String from class shapes.Square to public getDescription() : String from class shapes.Rectangle"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "1a29b2b054ee6593bf9a262cbdb7e0a9b33283a8",
        "refactorings": [
            {
                "description": "Push Down Method public getDescription() : String from class shapes.Rectangle to public getDescription() : String from class shapes.Square"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "779e447cd4336832b2daa900f3dc00f78c45c09d",
        "refactorings": [
            {
                "description": "Add Parameter filter : (KtExpression) -> Boolean in method public visitAllExpressions(context BindingContext, filter (KtExpression) -> Boolean, alreadyGot Set<KtElement>, body (KtExpression) -> Unit) from class Expression.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "f1d820596e81d3dff00d5f9d956f87f74a2d96c6",
        "refactorings": [
            {
                "description": "Extract Interface shapes.Shape from classes [shapes.Circle, shapes.Rectangle]"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "99f12c40f4a3d73b294f201d2bf0978015b417c9",
        "refactorings": [
            {
                "description": "Extract Class person.Car from class Person"
            },
            {
                "description": "Move Attribute public carNumber : String from class Person to public carNumber : String from class person.Car"
            },
            {
                "description": "Move Attribute public carColor : String from class Person to public carColor : String from class person.Car"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "ee3937e9d8ab68ff3c23b081a045cfe2c0625070",
        "refactorings": [
            {
                "description": "Inline Method public getTextId() : String inlined to public getPersonId() : String in class Person"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "036af43fb8c000db957af741cc31f4c6cefac363",
        "refactorings": [
            {
                "description": "Extract Method public printId() extracted from public printInfo() in class Person"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "b1dd91ea6f418acd3e5ee49c2a40eaf499c1240e",
        "refactorings": [
            {
                "description": "Extract Method protected visitReferenceTree(reference KtElement, target KtElement) extracted from public visitReferenceExpression(expression KtReferenceExpression) in class io.kotless.parser.utils.psi.visitor.KtReferenceFollowingVisitor"
            },
            {
                "description": "Rename Parameter expression : KtReferenceExpression to reference : KtElement in method protected visitReferenceTree(reference KtElement, target KtElement) in class io.kotless.parser.utils.psi.visitor.KtReferenceFollowingVisitor"
            },
            {
                "description": "Change Parameter Type expression : KtReferenceExpression to reference : KtElement in method protected visitReferenceTree(reference KtElement, target KtElement) in class io.kotless.parser.utils.psi.visitor.KtReferenceFollowingVisitor"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "e1cbb66d414fdfc7662789bc20b4e288655d4149",
        "refactorings": [
            {
                "description": "Rename Parameter file : File to directory : File in method public writeToDirectory(directory File) : File in class io.kotless.terraform.TFFile"
            },
            {
                "description": "Rename Method public write(file File) renamed to public writeToDirectory(directory File) : File in class io.kotless.terraform.TFFile"
            },
            {
                "description": "Extract Method private parseSources() : Schema extracted from public act() in class io.kotless.plugin.gradle.tasks.gen.KotlessGenerateTask"
            },
            {
                "description": "Extract Method private dumpGeneratedFiles(generated Set<TFFile>) extracted from public act() in class io.kotless.plugin.gradle.tasks.gen.KotlessGenerateTask"
            },
            {
                "description": "Extract Method private dumpGeneratedFiles(infra TFFile) extracted from public act() in class io.kotless.plugin.gradle.tasks.gen.KotlessLocalGenerateTask"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "fa0b54989337508e93a6c690dbad248173d528b9",
        "refactorings": [
            {
                "description": "Extract Method private initMaps() extracted from public initialize() in class ui.Controller"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "22da56bd58ec51896626689321b4c04084543ba7",
        "refactorings": [
            {
                "description": "Extract Method private sendDataToServer(request Request) : Boolean extracted from public sendTrackingData(file File) in class PluginServer"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "997be50343d6ba9aa70657cc6e68677f238d8700",
        "refactorings": [
            {
                "description": "Move Class Task moved to models.Task"
            },
            {
                "description": "Move Class Example moved to models.Example"
            },
            {
                "description": "Extract Method private getCollection(url String, collection Model) : List<T> extracted from public getTasks() : List<Task> in class PluginServer"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "1569025cddabed1e13621dd4f4e3c61dfb766aa7",
        "refactorings": [
            {
                "description": "Extract Method private initWithServer(panel JPanel, project Project, scale Double) extracted from public createContent(project Project) : JComponent in class org.jetbrains.research.ml.codetracker.ui.MainController"
            },
            {
                "description": "Extract Method private initWithoutServer(panel JPanel, project Project, scale Double) extracted from public createContent(project Project) : JComponent in class org.jetbrains.research.ml.codetracker.ui.MainController"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "d396ad3df39bcea35398a807833323929422734f",
        "refactorings": [
            {
                "description": "Remove Parameter group : String in method public getDependency(project Project, group String, name String) : Dependency? from class io.kotless.plugin.gradle.utils.Dependencies"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "9689625b77ad018fae9711a3a6021debf031eeb7",
        "refactorings": [
            {
                "description": "Move Class io.kotless.plugin.gradle.utils.Dependencies moved to io.kotless.plugin.gradle.utils.gradle.Dependencies"
            },
            {
                "description": "Move Class io.kotless.plugin.gradle.utils.Groups moved to io.kotless.plugin.gradle.utils.gradle.Groups"
            },
            {
                "description": "Rename Class io.kotless.plugin.gradle.utils.Archiver renamed to io.kotless.plugin.gradle.utils.Archive"
            },
            {
                "description": "Change Parameter Type archiver : Archiver to archiver : Archive in method public download(url URL, toFile File, archiver Archive) in class io.kotless.plugin.gradle.utils.Downloads"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "0dd96c0d843fe0d281fad45e155c2ba769b69887",
        "refactorings": [
            {
                "description": "Add Parameter task : String in method public test generate time site example(task String, time IntRange) from class io.kotless.plugin.gradle.ExampleProjectTests"
            },
            {
                "description": "Add Parameter time : IntRange in method public test generate time site example(task String, time IntRange) from class io.kotless.plugin.gradle.ExampleProjectTests"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "0be03b9e8500424f3d1ed8dd006bb4f46c255c90",
        "refactorings": [
            {
                "description": "Move Class io.kotless.Lambda moved to io.kotless.resource.Lambda"
            },
            {
                "description": "Move Class io.kotless.Permission moved to io.kotless.permission.Permission"
            },
            {
                "description": "Move Class io.kotless.StaticResource moved to io.kotless.resource.StaticResource"
            },
            {
                "description": "Rename Class io.kotless.Webapp renamed to io.kotless.Application"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway.Deployment to entity : Application.ApiGateway.Deployment in method public generate(entity Application.ApiGateway.Deployment, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.apigateway.DeploymentFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway to entity : Application.ApiGateway in method public generate(entity Application.ApiGateway, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.apigateway.DomainFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway to entity : Application.ApiGateway in method public generate(entity Application.ApiGateway, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.apigateway.RestAPIFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Events.Scheduled to entity : Application.Events.Scheduled in method public mayRun(entity Application.Events.Scheduled, context GenerationContext) : Boolean in class io.kotless.gen.factory.event.ScheduledEventsFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Events.Scheduled to entity : Application.Events.Scheduled in method public generate(entity Application.Events.Scheduled, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.event.ScheduledEventsFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp to entity : Application in method public generate(entity Application, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.info.InfoFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway.DynamicRoute to entity : Application.ApiGateway.DynamicRoute in method public generate(entity Application.ApiGateway.DynamicRoute, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route.dynamic.DynamicRouteFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp to entity : Application in method public generate(entity Application, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route.static.StaticRoleFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway.StaticRoute to entity : Application.ApiGateway.StaticRoute in method public generate(entity Application.ApiGateway.StaticRoute, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route.static.StaticRouteFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Route53 to entity : Application.Route53 in method public generate(entity Application.Route53, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route53.CertificateFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Route53 to entity : Application.Route53 in method public generate(entity Application.Route53, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route53.ZoneFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Route53 to entity : Application.Route53 in method public generate(entity Application.Route53, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route53.RecordFactory"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "f9b886f864eb46122936a7ffe4c8d128cfc78765",
        "refactorings": [
            {
                "description": "Rename Variable routeCalls : Untyped to calls : Untyped in method private getDynamicPath(element KtElement, binding BindingContext) : URIPath in class io.kotless.parser.ktor.processor.route.DynamicRoutesProcessor"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "530fa72a73bc4b04d647fcd46cba63518320a407",
        "refactorings": [
            {
                "description": "Move Method private getParent(name String) : Path? from class io.kotless.parser.spring.SpringParser to private getParent(name String) : Path? from class io.kotless.parser.spring.processor.route.StaticRoutesProcessor"
            },
            {
                "description": "Move Method private createResource(file File, path URIPath, context ProcessorContext) from class io.kotless.parser.spring.SpringParser to private createResource(file File, path URIPath, context ProcessorContext) from class io.kotless.parser.spring.processor.route.StaticRoutesProcessor"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "2552b58ae42daa0e82294e76f2ecf76e5c6443b1",
        "refactorings": [
            {
                "description": "Rename Method public getMethod(binding BindingContext, func KtNamedFunction) : HttpMethod renamed to public getMethods(binding BindingContext, func KtNamedFunction) : Set<HttpMethod> in class io.kotless.parser.spring.processor.route.SpringAnnotationUtils"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "7456af0d1354403723c651ac11edbf4fd630432c",
        "refactorings": [
            {
                "description": "Move Class io.kotless.parser.SpringParser moved to io.kotless.parser.spring.SpringParser"
            },
            {
                "description": "Rename Parameter inputStream : InputStream to input : InputStream in method public handleRequest(input InputStream, output OutputStream, context Context) in class io.kotless.dsl.spring.Kotless"
            },
            {
                "description": "Rename Parameter outputStream : OutputStream to output : OutputStream in method public handleRequest(input InputStream, output OutputStream, context Context) in class io.kotless.dsl.spring.Kotless"
            },
            {
                "description": "Change Parameter Type param : KProperty1<out Annotation, Array<out T>> to param : KProperty<Array<T>> in method public getArrayValue(context BindingContext, param KProperty<Array<T>>) : Array<T> in class Getters.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "3c9f66a80b0b8c0fa939b5e83aad316e62b0441b",
        "refactorings": [
            {
                "description": "Move Method public testEmpty() from class io.ktor.util.ConcurrentMapTest to public testEmpty() from class io.ktor.util.collections.ConcurrentMapTest"
            },
            {
                "description": "Move Method public testAdd() from class io.ktor.util.ConcurrentMapTest to public testAdd() from class io.ktor.util.collections.ConcurrentMapTest"
            },
            {
                "description": "Move Method public testRemove() from class io.ktor.util.ConcurrentMapTest to public testRemove() from class io.ktor.util.collections.ConcurrentMapTest"
            },
            {
                "description": "Move Method public testMany() from class io.ktor.util.ConcurrentMapTest to public testMany() from class io.ktor.util.collections.ConcurrentMapTest"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "71643f70f10ef4852e63479f132bfaa64b496848",
        "refactorings": [
            {
                "description": "Rename Class io.ktor.client.tests.features.CookiesTest renamed to io.ktor.client.tests.features.CookiesMockTest"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "f0de3df4f83eaacd380d00274786761f613f0087",
        "refactorings": [
            {
                "description": "Rename Method private tryAddToPhaseFastpath(phase PipelinePhase, block PipelineInterceptor<TSubject, TContext>) : Boolean renamed to private tryAddToPhaseFastPath(phase PipelinePhase, block PipelineInterceptor<TSubject, TContext>) : Boolean in class io.ktor.util.pipeline.Pipeline"
            },
            {
                "description": "Rename Variable e : Untyped to current : Untyped in method private findPhase(phase PipelinePhase) : PhaseContent<TSubject, TContext> in class io.ktor.util.pipeline.Pipeline"
            },
            {
                "description": "Rename Variable e : Untyped to current : Untyped in method private hasPhase(phase PipelinePhase) : Boolean in class io.ktor.util.pipeline.Pipeline"
            },
            {
                "description": "Rename Variable e : Untyped to current : Untyped in method private findPhaseIndex(phase PipelinePhase) : Int in class io.ktor.util.pipeline.Pipeline"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "8b6f0742b03c9964d93365b86864f7bd4e2f9769",
        "refactorings": [
            {
                "description": "Change Package io.ktor.network.util to io.ktor.util.network"
            },
            {
                "description": "Move Class io.ktor.network.util.NetworkAddress moved to io.ktor.util.network.NetworkAddress"
            },
            {
                "description": "Move Class io.ktor.network.util.UnresolvedAddressException moved to io.ktor.util.network.UnresolvedAddressException"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "b27460ca7d0872b5f9560e937597aecddfb69941",
        "refactorings": [
            {
                "description": "Add Parameter size : Int in method private setupMethod(easyHandle EasyHandle, method String, size Int) from class io.ktor.client.engine.curl.internal.CurlMultiApiHandler"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "22b5d7a47d109fb3713adde0d7cc9a226f8d4a34",
        "refactorings": [
            {
                "description": "Rename Parameter contentType : ContentType to pattern : ContentType in method public match(pattern ContentType) : Boolean in class io.ktor.http.ContentType"
            },
            {
                "description": "Rename Parameter contentType : String to pattern : String in method public match(pattern String) : Boolean in class io.ktor.http.ContentType"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "cb2cd6a4cdf05fcf9c27b7fbb6526cbf4922f371",
        "refactorings": [
            {
                "description": "Add Parameter module : SerialModule in method private elementSerializer(module SerialModule) : KSerializer<*> from class KotlinxSerializer.kt"
            },
            {
                "description": "Add Parameter module : SerialModule in method private elementSerializer(module SerialModule) : KSerializer<*> from class SerializerLookup.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "72611f5cf3f2e4cc1e69696ad6f427793321b496",
        "refactorings": [
            {
                "description": "Add Parameter passParamsInURL : Boolean in method private oauth2RequestAccessToken(client HttpClient, method HttpMethod, usedRedirectUrl String?, baseUrl String, clientId String, clientSecret String, state String?, code String?, extraParameters Map<String, String>, configure () -> Unit, useBasicAuth Boolean, nonceManager NonceManager, passParamsInURL Boolean, grantType String) : OAuthAccessTokenResponse.OAuth2 from class OAuth2.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "7bb6daf27b34d4ad2b206baf393e28374a43e603",
        "refactorings": [
            {
                "description": "Add Parameter task : NSURLSessionTask in method public URLSession(session NSURLSession, task NSURLSessionTask, didReceiveChallenge NSURLAuthenticationChallenge, completionHandler (NSURLSessionAuthChallengeDisposition,NSURLCredential?) -> Unit) from class io.ktor.client.engine.ios.IosResponseReader"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "84e03d526cef5793338c5e534578dcd9a30aa43a",
        "refactorings": [
            {
                "description": "Extract Method private requestNextView(atLeast Int) : IoBuffer? extracted from public request(atLeast Int) : IoBuffer? in class io.ktor.utils.io.ByteChannelSequentialBase"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "41459eca6ce16fccc92f0318bcc93bd2022c263c",
        "refactorings": [
            {
                "description": "Extract Class io.ktor.locations.LocationsImpl from class io.ktor.locations.Locations"
            },
            {
                "description": "Move Method private create(allParameters Parameters) : Any from class io.ktor.locations.Locations to private create(allParameters Parameters) : Any from class io.ktor.locations.BackwardCompatibleImpl"
            },
            {
                "description": "Move Method private createFromParameters(parameters Parameters, name String, type Type, optional Boolean) : Any? from class io.ktor.locations.Locations to private createFromParameters(parameters Parameters, name String, type Type, optional Boolean) : Any? from class io.ktor.locations.BackwardCompatibleImpl"
            },
            {
                "description": "Move Method private combine(relativePath String, queryValues List<Pair<String, String>>) : ResolvedUriInfo from class io.ktor.locations.Locations to private combine(relativePath String, queryValues List<Pair<String, String>>) : ResolvedUriInfo from class io.ktor.locations.BackwardCompatibleImpl"
            },
            {
                "description": "Add Parameter visited : MutableSet<KClass<*>> in method private getOrCreateInfo(locationClass KClass<*>, visited MutableSet<KClass<*>>) : LocationInfo from class io.ktor.locations.BackwardCompatibleImpl"
            },
            {
                "description": "Move Method private getOrCreateInfo(locationClass KClass<*>) : LocationInfo from class io.ktor.locations.Locations to private getOrCreateInfo(locationClass KClass<*>, visited MutableSet<KClass<*>>) : LocationInfo from class io.ktor.locations.BackwardCompatibleImpl"
            },
            {
                "description": "Move Method private pathAndQuery(location Any) : ResolvedUriInfo from class io.ktor.locations.Locations to private pathAndQuery(location Any) : ResolvedUriInfo from class io.ktor.locations.BackwardCompatibleImpl"
            },
            {
                "description": "Move Method public href(location Any) : String from class io.ktor.locations.Locations to public href(instance Any) : String from class io.ktor.locations.LocationsImpl"
            },
            {
                "description": "Rename Parameter location : Any to instance : Any in method public href(instance Any) : String in class io.ktor.locations.LocationsImpl"
            },
            {
                "description": "Move Attribute private conversionService : ConversionService from class io.ktor.locations.Locations to protected conversionService : ConversionService from class io.ktor.locations.LocationsImpl"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "4e5cd9b1a500a82817bf3c7c6ec3f2c7c47ea157",
        "refactorings": [
            {
                "description": "Add Parameter closeRequest : Boolean in method public handleRequest(closeRequest Boolean, setup () -> Unit) : TestApplicationCall from class io.ktor.server.testing.TestApplicationEngine"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "05461e94d64109eb47e14132eda6f16059cb71db",
        "refactorings": [
            {
                "description": "Rename Class io.ktor.util.FLG renamed to io.ktor.util.GzipHeaderFlags"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "4e5ab80a1dc918f11d5a6a7cfa5d2829246abdb5",
        "refactorings": [
            {
                "description": "Move And Rename Class io.ktor.client.features.HttpConnectTimeoutException moved and renamed to io.ktor.network.sockets.ConnectTimeoutException"
            },
            {
                "description": "Move And Rename Class io.ktor.client.features.HttpSocketTimeoutException moved and renamed to io.ktor.network.sockets.SocketTimeoutException"
            },
            {
                "description": "Rename Method public assertFailsWithRootCause(block () -> Unit) renamed to public assertFailsAndContainsCause(block () -> Unit) in class Assertions.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "86fb0294aaee3e1104efca22b2612d9fc6ffc1ab",
        "refactorings": [
            {
                "description": "Remove Parameter handleErrors : Boolean in method private executeChallenges(context AuthenticationContext, handleErrors Boolean) from class io.ktor.auth.Authentication"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "4644d060756f33a8190af6ae2971e2937817608e",
        "refactorings": [
            {
                "description": "Rename Parameter ex : Exception to cause : Exception in method public failed(cause Exception) in class io.ktor.client.engine.apache.ApacheResponseConsumerDispatching"
            },
            {
                "description": "Add Parameter configuration : () -> Unit in method public connect(address InetSocketAddress, configuration () -> Unit) : Socket from class io.ktor.client.engine.cio.ConnectionFactory"
            },
            {
                "description": "Add Parameter requestData : HttpRequestData? in method private connect(requestData HttpRequestData?) : Socket from class io.ktor.client.engine.cio.Endpoint"
            },
            {
                "description": "Add Parameter engine : OkHttpClient in method private executeWebSocketRequest(engine OkHttpClient, engineRequest Request, callContext CoroutineContext) : HttpResponseData from class io.ktor.client.engine.okhttp.OkHttpEngine"
            },
            {
                "description": "Add Parameter engine : OkHttpClient in method private executeHttpRequest(engine OkHttpClient, engineRequest Request, callContext CoroutineContext, requestData HttpRequestData) : HttpResponseData from class io.ktor.client.engine.okhttp.OkHttpEngine"
            },
            {
                "description": "Add Parameter requestData : HttpRequestData in method private executeHttpRequest(engine OkHttpClient, engineRequest Request, callContext CoroutineContext, requestData HttpRequestData) : HttpResponseData from class io.ktor.client.engine.okhttp.OkHttpEngine"
            },
            {
                "description": "Add Parameter socketOptions : SocketOptions.TCPClientSocketOptions? in method internal attachForWritingImpl(channel ByteChannel, nioChannel WritableByteChannel, selectable Selectable, selector SelectorManager, pool ObjectPool<ByteBuffer>, socketOptions SocketOptions.TCPClientSocketOptions?) : ReaderJob from class CIOWriter.kt"
            },
            {
                "description": "Add Parameter socketOptions : SocketOptions.TCPClientSocketOptions? in method internal attachForReadingImpl(channel ByteChannel, nioChannel ReadableByteChannel, selectable Selectable, selector SelectorManager, pool ObjectPool<ByteBuffer>, socketOptions SocketOptions.TCPClientSocketOptions?) : WriterJob from class CIOReader.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "62073708d8499ffb047baaf0d35ffa500341b7f1",
        "refactorings": [
            {
                "description": "Change Parameter Type session : Any to session : T in method public serialize(session T) : String in class io.ktor.sessions.SessionSerializerReflection"
            },
            {
                "description": "Change Parameter Type value : Any to value : S in method public store(call ApplicationCall, value S) : String in class io.ktor.sessions.SessionTrackerById"
            },
            {
                "description": "Change Parameter Type value : Any to value : S in method public validate(value S) in class io.ktor.sessions.SessionTrackerById"
            },
            {
                "description": "Change Parameter Type serializer : SessionSerializerReflection<T> to serializer : SessionSerializer<T> in method private assertSerializeDeserialize(session T, serializer SessionSerializer<T>) in class io.ktor.tests.server.sessions.AutoSerializerTest"
            },
            {
                "description": "Change Parameter Type value : Any to value : S in method public validate(value S) in class io.ktor.sessions.SessionTrackerByValue"
            },
            {
                "description": "Change Parameter Type value : Any to value : S in method public store(call ApplicationCall, value S) : String in class io.ktor.sessions.SessionTrackerByValue"
            },
            {
                "description": "Change Parameter Type value : Any to value : S in method public store(call ApplicationCall, value S) : String in class io.ktor.sessions.SessionTracker"
            },
            {
                "description": "Change Parameter Type value : Any to value : S in method public validate(value S) in class io.ktor.sessions.SessionTracker"
            },
            {
                "description": "Change Parameter Type session : Any to session : T in method public serialize(session T) : String in class io.ktor.sessions.SessionSerializer"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "0bcdf147e596a15712335ba5c30ec3dd0b835dee",
        "refactorings": [
            {
                "description": "Inline Method private checkIfRangeETagHeader(versions List<Version>, ifRange String) : Boolean inlined to private checkIfRangeHeader(content OutgoingContent.ReadChannelContent, call ApplicationCall) : Boolean in class io.ktor.features.PartialContent"
            },
            {
                "description": "Inline Method private checkIfRangeDateHeader(ifRange String, versions List<Version>) : Boolean inlined to private checkIfRangeHeader(content OutgoingContent.ReadChannelContent, call ApplicationCall) : Boolean in class io.ktor.features.PartialContent"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "b5aa91042f8a310946cd00c1d3d56c68126a1cef",
        "refactorings": [
            {
                "description": "Move Class io.ktor.utils.io.ByteChannelNativeTests moved to io.ktor.utils.io.tests.ByteChannelNativeTests"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "39d46062a23796460c5f7fd682eb5b733d063c0b",
        "refactorings": [
            {
                "description": "Extract Superclass io.ktor.client.engine.HttpClientEngineBase from classes [io.ktor.client.engine.android.AndroidClientEngine, io.ktor.client.engine.apache.ApacheEngine, io.ktor.client.engine.cio.CIOEngine, io.ktor.client.engine.js.JsClientEngine, io.ktor.client.engine.curl.CurlClientEngine, io.ktor.client.engine.ios.IosClientEngine, io.ktor.client.engine.jetty.JettyHttp2Engine, io.ktor.client.engine.mock.MockEngine, io.ktor.client.engine.okhttp.OkHttpEngine, io.ktor.server.testing.client.TestHttpClientEngine]"
            },
            {
                "description": "Pull Up Method public close() from class io.ktor.client.engine.ios.IosClientEngine to public close() from class io.ktor.client.engine.HttpClientEngineBase"
            },
            {
                "description": "Pull Up Method public close() from class io.ktor.client.engine.js.JsClientEngine to public close() from class io.ktor.client.engine.HttpClientEngineBase"
            },
            {
                "description": "Pull Up Attribute public coroutineContext : CoroutineContext from class io.ktor.client.engine.ios.IosClientEngine to public coroutineContext : CoroutineContext from class io.ktor.client.engine.HttpClientEngineBase"
            },
            {
                "description": "Pull Up Attribute public coroutineContext : CoroutineContext from class io.ktor.client.engine.curl.CurlClientEngine to public coroutineContext : CoroutineContext from class io.ktor.client.engine.HttpClientEngineBase"
            },
            {
                "description": "Pull Up Attribute public coroutineContext : CoroutineContext from class io.ktor.client.engine.mock.MockEngine to public coroutineContext : CoroutineContext from class io.ktor.client.engine.HttpClientEngineBase"
            },
            {
                "description": "Pull Up Attribute public coroutineContext : CoroutineContext from class io.ktor.server.testing.client.TestHttpClientEngine to public coroutineContext : CoroutineContext from class io.ktor.client.engine.HttpClientEngineBase"
            },
            {
                "description": "Pull Up Attribute public coroutineContext : CoroutineContext from class io.ktor.client.engine.js.JsClientEngine to public coroutineContext : CoroutineContext from class io.ktor.client.engine.HttpClientEngineBase"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "33c21dcf0f1a88e30877e6709150211df57517c0",
        "refactorings": [
            {
                "description": "Rename Method internal skipSpHTab(text CharArrayBuilder, start Int, end Int) : Int renamed to internal skipSpacesAndHorizontalTabs(text CharArrayBuilder, start Int, end Int) : Int in class Tokenizer.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "c84d27482cf5758d3ae14991ecbd1adb6b8ed26f",
        "refactorings": [
            {
                "description": "Rename Method public constructionTest() renamed to public testConstruction() in class io.ktor.tests.utils.GMTDateTest"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "ee0d1980f69fffeb07982a3d9e3b1479b05720e0",
        "refactorings": [
            {
                "description": "Add Parameter overProxy : Boolean in method internal write(output ByteWriteChannel, callContext CoroutineContext, overProxy Boolean) from class utils.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "0864777e72b71e2ef9533a01a083b3a1d3870cfd",
        "refactorings": [
            {
                "description": "Remove Parameter username : String in method private constructBasicAuthValue(username String, password String) : String from class io.ktor.client.features.auth.providers.BasicAuthProvider"
            },
            {
                "description": "Remove Parameter password : String in method private constructBasicAuthValue(username String, password String) : String from class io.ktor.client.features.auth.providers.BasicAuthProvider"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "7a760378ed841f2b38e93b2965cd798e3357420c",
        "refactorings": [
            {
                "description": "Rename Method public use(block () -> R) : R renamed to public withLock(block () -> R) : R in class Lock.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "b671720eebfcda7a95d2775cc9c20ef0a7dd37bb",
        "refactorings": [
            {
                "description": "Add Parameter jwtConfigure : () -> Unit in method private getVerifier(jwkProvider JwkProvider, issuer String?, token HttpAuthHeader, schemes JWTAuthSchemes, jwtConfigure () -> Unit) : JWTVerifier? from class JWTAuth.kt"
            },
            {
                "description": "Rename Method private getVerifierNullableIssuer(jwkProvider JwkProvider, issuer String?, token HttpAuthHeader, schemes JWTAuthSchemes) : JWTVerifier? renamed to private getVerifier(jwkProvider JwkProvider, issuer String?, token HttpAuthHeader, schemes JWTAuthSchemes, jwtConfigure () -> Unit) : JWTVerifier? in class JWTAuth.kt"
            },
            {
                "description": "Add Parameter configure : JWTConfigureFunction in method private getVerifier(jwkProvider JwkProvider, token HttpAuthHeader, schemes JWTAuthSchemes, configure JWTConfigureFunction) : JWTVerifier? from class JWTAuth.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "8e62604f1ab7ddc4dfc90d9da786d88ecc3e3fbe",
        "refactorings": [
            {
                "description": "Rename Method private deflate(outBuffer ByteBuffer) renamed to private deflateTo(outBuffer ByteBuffer) in class Deflater.kt"
            },
            {
                "description": "Rename Method private setInput(buffer ByteBuffer) renamed to private setInputBuffer(buffer ByteBuffer) in class Deflater.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "9f896df3470232308bfb56d0b87d097381deed1b",
        "refactorings": [
            {
                "description": "Move Class io.ktor.client.engine.js.test.GithubProfile moved to io.ktor.client.features.json.GithubProfile"
            },
            {
                "description": "Rename Method public registerCustomTest() renamed to public testRegisterCustom() in class io.ktor.client.features.json.KotlinxSerializerTest"
            },
            {
                "description": "Rename Method public registerCustomListTest() renamed to public testRegisterCustomList() in class io.ktor.client.features.json.KotlinxSerializerTest"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "c2925e441ed9d86aea9a734d2cf7958ad3d67c5f",
        "refactorings": [
            {
                "description": "Rename Method private installJson() renamed to private testConfiguration() in class io.ktor.client.tests.HttpBinTest"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "010694416a7cd0cb5ff18d498eb7dc7f79b5dae3",
        "refactorings": [
            {
                "description": "Extract Method private launchResponseJob(source ByteReadChannel) extracted from public responseChannel() : ByteWriteChannel in class io.ktor.server.testing.TestApplicationResponse"
            },
            {
                "description": "Change Variable Type result : Untyped to source : ByteReadChannel in method private launchResponseJob(source ByteReadChannel) in class io.ktor.server.testing.TestApplicationResponse"
            },
            {
                "description": "Extract Method internal awaitForResponseCompletion() extracted from public flush() in class io.ktor.server.testing.TestApplicationResponse"
            },
            {
                "description": "Parameterize Variable result : Untyped to source : ByteReadChannel in method private launchResponseJob(source ByteReadChannel) in class io.ktor.server.testing.TestApplicationResponse"
            }
        ]
    },
    {
        "repository": "https://github.com/ktorio/ktor.git",
        "sha1": "2db63317bec11ada542c839564f48c9a448ae5c9",
        "refactorings": [
            {
                "description": "Extract Method private finishIfResponseSent(context PipelineContext<*, ApplicationCall>) extracted from private interceptResponse(context PipelineContext<*, ApplicationCall>, message Any) in class io.ktor.features.StatusPages"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "2679b67244efe8e839878e86b5769686475106a4",
        "refactorings": [
            {
                "description": "Inline Variable d : Untyped in method public desc() from class shapes.Square"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "8885862728f411f847ee74a2b3c65f9c2b8f92f6",
        "refactorings": [
            {
                "description": "Extract Variable d : Untyped in method public desc() from class shapes.Square"
            }
        ]
    }
]
